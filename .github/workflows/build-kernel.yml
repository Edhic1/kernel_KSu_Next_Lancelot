name: Build Kernel
on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-22.04

    env:
      CCACHE_COMPILERCHECK: '%compiler% -dumpmachine; %compiler% -dumpversion'
      CCACHE_NOHASHDIR: 'true'
      CCACHE_HARDLINK: 'true'

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Load environment variables from config.env
      run: |
        set -o allexport
        source config.env
        set +o allexport

    - name: Install yq
      run: |
       set -e
       YQ_VERSION="v4.48.0"
       YQ_BIN="/usr/local/bin/yq"
       curl -sLo yq https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64
       chmod +x yq
       sudo mv yq ${YQ_BIN}
       ${YQ_BIN} --version

    
    - name: Set up swap
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git ccache automake flex lzop bison gperf build-essential zip curl \
          zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev squashfs-tools \
          pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev \
          pwgen libswitch-perl policycoreutils minicom libxml-simple-perl bc \
          libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev \
          xsltproc unzip device-tree-compiler python2 python3 binutils-aarch64-linux-gnu
        mkdir -p kernel_workspace

    - name: Prepare timestamps & device name
      run: |
        echo "BUILD_TIME=$(TZ=UTC date +%Y%m%d%H%M)" >> $GITHUB_ENV
        echo "DEVICE=${KERNEL_CONFIG#*_}" | sed -E 's/_defconfig//' >> $GITHUB_ENV

    - name: Clone kernel source
      run: |
        cd kernel_workspace
        git clone --depth=1 --recursive --branch "${KERNEL_SOURCE_BRANCH}" "${KERNEL_SOURCE}" android-kernel
        echo "LOCALVERSION=$(cat android-kernel/localversion || echo)" >> $GITHUB_ENV

    - name: Setup Kernel Configuration from external file
      run: |
        cd kernel_workspace/android-kernel
        CONFIG_PATH="$GITHUB_WORKSPACE/.github/kernel-config.yml"
        DEFCONFIG="arch/${KERNEL_ARCH}/configs/${KERNEL_CONFIG}"

        enable_ksu=$(yq e '.kernel_su.enabled' $CONFIG_PATH)
        hook_patch=$(yq e '.kernel_su.hooks_patch' $CONFIG_PATH)
        add_kprobes=$(yq e '.kernel_su.add_kprobes' $CONFIG_PATH)
        overlayfs=$(yq e '.overlayfs.enabled' $CONFIG_PATH)
        apatch=$(yq e '.apatch.enabled' $CONFIG_PATH)
        fix_apatch=$(yq e '.apatch.fix_openela' $CONFIG_PATH)
        disable_lto=$(yq e '.disable.lto' $CONFIG_PATH)
        disable_werror=$(yq e '.disable.cc_werror' $CONFIG_PATH)
        old_android=$(yq e '.old_android.enabled' $CONFIG_PATH)
        fix_wifi=$(yq e '.fix_wifi_speed' $CONFIG_PATH)

        if [ "$enable_ksu" = "true" ]; then
          if [ "$hook_patch" = "true" ]; then
            git apply $GITHUB_WORKSPACE/patches/KSU_HOOKS_PATCH.patch
            if grep -q "CONFIG_KSU" "$DEFCONFIG"; then
              sed -i 's/# CONFIG_KSU is not set/CONFIG_KSU=y/' "$DEFCONFIG"
              sed -i 's/CONFIG_KSU=n/CONFIG_KSU=y/' "$DEFCONFIG"
            else
              echo "CONFIG_KSU=y" >> "$DEFCONFIG"
            fi
          fi
          if [ "$add_kprobes" = "true" ] && [ "$hook_patch" != "true" ]; then
            echo -e "CONFIG_MODULES=y\nCONFIG_KPROBES=y\nCONFIG_HAVE_KPROBES=y\nCONFIG_KPROBE_EVENTS=y" >> "$DEFCONFIG"
          fi
          yq e '.kernel_su_flags[]' "$CONFIG_PATH" >> "$DEFCONFIG"
        fi

        if [ "$overlayfs" = "true" ]; then
          echo -e "CONFIG_OVERLAY_FS=y\nCONFIG_OVERLAY_FS_REDIRECT_DIR=y\nCONFIG_OVERLAY_FS_INDEX=y" >> "$DEFCONFIG"
        fi

        if [ "$apatch" = "true" ]; then
          sed -i 's/# CONFIG_DEBUG_KERNEL is not set/CONFIG_DEBUG_KERNEL=y/' "$DEFCONFIG"
          sed -i 's/CONFIG_DEBUG_KERNEL=n/CONFIG_DEBUG_KERNEL=y/' "$DEFCONFIG"
          echo "CONFIG_DEBUG_KERNEL=y" >> "$DEFCONFIG"
          for f in KALLSYMS KALLSYMS_ALL KALLSYMS_BASE_RELATIVE; do
            sed -i "s/# CONFIG_$f is not set/CONFIG_$f=y/" "$DEFCONFIG" || true
            sed -i "s/CONFIG_$f=n/CONFIG_$f=y/" "$DEFCONFIG" || true
            echo "CONFIG_$f=y" >> "$DEFCONFIG"
          done
          if [ "$fix_apatch" = "true" ]; then
            git apply $GITHUB_WORKSPACE/patches/FIX_APATCH_OPENELA.patch || {
              git apply $GITHUB_WORKSPACE/patches/REVERT_ADD_GET_CRED_RCU.patch
              git apply $GITHUB_WORKSPACE/patches/FIX_APATCH_OPENELA.patch
            }
          fi
        fi

        if [ "$disable_lto" = "true" ]; then
          sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' "$DEFCONFIG"
          sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' "$DEFCONFIG"
          sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' "$DEFCONFIG"
          echo "CONFIG_LTO_NONE=y" >> "$DEFCONFIG"
        fi

        if [ "$disable_werror" = "true" ]; then
          echo "CONFIG_CC_WERROR=n" >> "$DEFCONFIG"
        fi

        if [ "$old_android" = "true" ]; then
          git apply $GITHUB_WORKSPACE/patches/OLD_ANDROID_SUPPORT.patch
          if grep -q "CONFIG_MMC_CRYPTO_LEGACY" "$DEFCONFIG"; then
            sed -i 's/# CONFIG_MMC_CRYPTO_LEGACY is not set/CONFIG_MMC_CRYPTO_LEGACY=y/' "$DEFCONFIG"
            sed -i 's/CONFIG_MMC_CRYPTO_LEGACY=n/CONFIG_MMC_CRYPTO_LEGACY=y/' "$DEFCONFIG"
          else
            echo "CONFIG_MMC_CRYPTO_LEGACY=y" >> "$DEFCONFIG"
          fi
        fi

        if [ "$fix_wifi" = "true" ]; then
          rm -rf drivers/misc/mediatek/connectivity
          cd drivers/misc/mediatek
          git clone https://github.com/Jbub5/connectivity.git --depth=1
          cd ../../../
        fi

    - name: Compile Kernel
      run: |
        cd kernel_workspace/android-kernel
        export PATH="$PWD/clang/bin:$PATH"
        export KBUILD_BUILD_USER=${{ github.actor }}
        export KBUILD_BUILD_HOST=github-actions
        make -j$(nproc) O=out ARCH=${KERNEL_ARCH} ${EXTRA_CMDS} ${KERNEL_CONFIG}

    - name: Verify kernel image
      run: |
        img=kernel_workspace/android-kernel/out/arch/${KERNEL_ARCH}/boot/${KERNEL_IMAGE_NAME}
        [ -f "$img" ] || { echo "Kernel image not found!"; exit 1; }

    - name: Prepare AnyKernel3
      run: |
        cd kernel_workspace
        git clone --depth=1 "${CUSTOM_ANYKERNEL3_SOURCE}" -b "${CUSTOM_ANYKERNEL3_BRANCH}" AnyKernel3
        cp android-kernel/out/arch/${KERNEL_ARCH}/boot/${KERNEL_IMAGE_NAME} AnyKernel3/
        rm -rf AnyKernel3/.git*

    - name: Upload kernel artifact
      uses: actions/upload-artifact@v4
      with:
        name: Kernel-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/AnyKernel3/
